"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["76641"],{15490:function(e,t,r){r.r(t),r.d(t,{default:()=>m,frontMatter:()=>c,metadata:()=>s,assets:()=>h,toc:()=>p,contentTitle:()=>d});var s=JSON.parse('{"id":"guides/request-storage","title":"Request Storage","description":"How to store the requests your crawler will go through","source":"@site/versioned_docs/version-3.11/guides/request_storage.mdx","sourceDirName":"guides","slug":"/guides/request-storage","permalink":"/docs/3.11/guides/request-storage","draft":false,"unlisted":false,"editUrl":"https://github.com/apify/crawlee/edit/master/website/versioned_docs/version-3.11/guides/request_storage.mdx","tags":[],"version":"3.11","lastUpdatedBy":"Jind\u0159ich B\xe4r","lastUpdatedAt":1720711256000,"frontMatter":{"id":"request-storage","title":"Request Storage","description":"How to store the requests your crawler will go through"},"sidebar":"docs","previous":{"title":"Guides","permalink":"/docs/3.11/guides"},"next":{"title":"Result Storage","permalink":"/docs/3.11/guides/result-storage"}}'),n=r("85893"),a=r("50065"),u=r("47927"),o=r("58168"),i=r("97645"),l=r("96199");let c={id:"request-storage",title:"Request Storage",description:"How to store the requests your crawler will go through"},d=void 0,h={},p=[{value:"Request queue",id:"request-queue",level:2},{value:"Request list",id:"request-list",level:2},{value:"Which one to choose?",id:"which-one-to-choose",level:2},{value:"Cleaning up the storages",id:"cleaning-up-the-storages",level:2}];function w(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Crawlee has several request storage types that are useful for specific tasks. The requests are stored on local disk to a directory defined by the ",(0,n.jsx)(t.code,{children:"CRAWLEE_STORAGE_DIR"})," environment variable. If this variable is not defined, by default Crawlee sets ",(0,n.jsx)(t.code,{children:"CRAWLEE_STORAGE_DIR"})," to ",(0,n.jsx)(t.code,{children:"./storage"})," in the current working directory."]}),"\n",(0,n.jsx)(t.h2,{id:"request-queue",children:"Request queue"}),"\n",(0,n.jsx)(t.p,{children:"The request queue is a storage of URLs to crawl. The queue is used for the deep crawling of websites, where we start with several URLs and then recursively follow links to other pages. The data structure supports both breadth-first and depth-first crawling orders."}),"\n",(0,n.jsxs)(t.p,{children:["Each Crawlee project run is associated with a ",(0,n.jsx)(t.strong,{children:"default request queue"}),". Typically, it is used to store URLs to crawl in the specific crawler run. Its usage is optional."]}),"\n",(0,n.jsxs)(t.p,{children:["In Crawlee, the request queue is represented by the ",(0,n.jsx)(u.Z,{to:"core/class/RequestQueue",children:(0,n.jsx)(t.code,{children:"RequestQueue"})})," class."]}),"\n",(0,n.jsxs)(t.p,{children:["The request queue is managed by ",(0,n.jsx)(u.Z,{to:"memory-storage/class/MemoryStorage",children:(0,n.jsx)(t.code,{children:"MemoryStorage"})})," class and its data is stored in memory, while also being off-loaded to the local directory specified by the ",(0,n.jsx)(t.code,{children:"CRAWLEE_STORAGE_DIR"})," environment variable as follows:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"{CRAWLEE_STORAGE_DIR}/request_queues/{QUEUE_ID}/entries.json\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"{QUEUE_ID}"})," is the name or ID of the request queue. The default queue has ID ",(0,n.jsx)(t.code,{children:"default"}),", unless we override it by setting the ",(0,n.jsx)(t.code,{children:"CRAWLEE_DEFAULT_REQUEST_QUEUE_ID"})," environment variable."]})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"entries.json"})," contains an array of requests."]})}),"\n",(0,n.jsx)(t.p,{children:"The following code demonstrates the usage of the request queue:"}),"\n",(0,n.jsxs)(o.Z,{groupId:"request_queue",children:[(0,n.jsx)(i.Z,{value:"crawler",label:"Usage with Crawler",default:!0,children:(0,n.jsx)(l.default,{language:"js",children:"import { CheerioCrawler } from 'crawlee';\n\n// The crawler will automatically process requests from the queue.\n// It's used the same way for Puppeteer/Playwright crawlers.\nconst crawler = new CheerioCrawler({\n    // Note that we're not specifying the requestQueue here\n    async requestHandler({ $, crawler, enqueueLinks }) {\n        // Add new request to the queue\n        await crawler.addRequests([{ url: 'https://example.com/new-page' }]);\n        // Add links found on page to the queue\n        await enqueueLinks();\n    },\n});\n\n// Add the initial requests.\n// Note that we are not opening the request queue explicitly before\nawait crawler.addRequests([\n    { url: 'https://example.com/1' },\n    { url: 'https://example.com/2' },\n    { url: 'https://example.com/3' },\n    // ...\n]);\n\n// Run the crawler\nawait crawler.run();\n"})}),(0,n.jsx)(i.Z,{value:"crawler_explicit",label:"Explicit usage with Crawler",children:(0,n.jsx)(l.default,{language:"js",children:"import { RequestQueue, CheerioCrawler } from 'crawlee';\n\n// Open the default request queue associated with the current run\nconst requestQueue = await RequestQueue.open();\n\n// Enqueue the initial requests\nawait requestQueue.addRequests([\n    { url: 'https://example.com/1' },\n    { url: 'https://example.com/2' },\n    { url: 'https://example.com/3' },\n    // ...\n]);\n\n// The crawler will automatically process requests from the queue.\n// It's used the same way for Puppeteer/Playwright crawlers\nconst crawler = new CheerioCrawler({\n    requestQueue,\n    async requestHandler({ $, request, enqueueLinks }) {\n        // Add new request to the queue\n        await requestQueue.addRequests([{ url: 'https://example.com/new-page' }]);\n        // Add links found on page to the queue\n        await enqueueLinks();\n    },\n});\n\n// Run the crawler\nawait crawler.run();\n"})}),(0,n.jsx)(i.Z,{value:"basic_operations",label:"Basic Operations",default:!0,children:(0,n.jsx)(l.default,{language:"js",children:"import { RequestQueue } from 'crawlee';\n\n// Open the default request queue associated with the crawler run\nconst requestQueue = await RequestQueue.open();\n\n// Enqueue the initial batch of requests (could be an array of just one)\nawait requestQueue.addRequests([\n    { url: 'https://example.com/1' },\n    { url: 'https://example.com/2' },\n    { url: 'https://example.com/3' },\n]);\n\n// Open the named request queue\nconst namedRequestQueue = await RequestQueue.open('named-queue');\n\n// Remove the named request queue\nawait namedRequestQueue.drop();\n"})})]}),"\n",(0,n.jsxs)(t.p,{children:["To see more detailed example of how to use the request queue with a crawler, see the ",(0,n.jsx)(t.a,{href:"/docs/examples/puppeteer-crawler",children:"Puppeteer Crawler"})," example."]}),"\n",(0,n.jsx)(t.h2,{id:"request-list",children:"Request list"}),"\n",(0,n.jsxs)(t.p,{children:["The request list is not a storage per se - it represents the list of URLs to crawl that is stored in a crawler run memory (or optionally in default ",(0,n.jsx)(t.a,{href:"../guides/result-storage#key-value-store",children:"Key-Value Store"})," associated with the run, if specified). The list is used for the crawling of a large number of URLs, when we know all the URLs which should be visited by the crawler and no URLs would be added during the run. The URLs can be provided either in code or parsed from a text file hosted on the web."]}),"\n",(0,n.jsx)(t.p,{children:"Request list is created exclusively for the crawler run and only if its usage is explicitly specified in the code. Its usage is optional."}),"\n",(0,n.jsxs)(t.p,{children:["In Crawlee, the request list is represented by the ",(0,n.jsx)(u.Z,{to:"core/class/RequestList",children:(0,n.jsx)(t.code,{children:"RequestList"})})," class."]}),"\n",(0,n.jsx)(t.p,{children:"The following code demonstrates basic operations of the request list:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"import { RequestList, PuppeteerCrawler } from 'crawlee';\n\n// Prepare the sources array with URLs to visit\nconst sources = [\n    { url: 'http://www.example.com/page-1' },\n    { url: 'http://www.example.com/page-2' },\n    { url: 'http://www.example.com/page-3' },\n];\n\n// Open the request list.\n// List name is used to persist the sources and the list state in the key-value store\nconst requestList = await RequestList.open('my-list', sources);\n\n// The crawler will automatically process requests from the list\n// It's used the same way for Cheerio /Playwright crawlers.\nconst crawler = new PuppeteerCrawler({\n    requestList,\n    async requestHandler({ page, request }) {\n        // Process the page (extract data, take page screenshot, etc).\n        // No more requests could be added to the request list here\n    },\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"which-one-to-choose",children:"Which one to choose?"}),"\n",(0,n.jsx)(t.p,{children:"When using Request queue - we would normally have several start URLs (e.g. category pages on e-commerce website) and then recursively add more (e.g. individual item pages) programmatically to the queue, it supports dynamic adding and removing of requests. No more URLs can be added to Request list after its initialization as it is immutable, URLs cannot be removed from the list either."}),"\n",(0,n.jsx)(t.p,{children:"On the other hand, the Request queue is not optimized for adding or removing numerous URLs in a batch. This is technically possible, but requests are added one by one to the queue, and thus it would take significant time with a larger number of requests. Request list however can contain even millions of URLs, and it would take significantly less time to add them to the list, compared to the queue."}),"\n",(0,n.jsx)(t.p,{children:"Note that Request queue and Request list can be used together by the same crawler. In such cases, each request from the Request list is enqueued into the Request queue first (to the foremost position in the queue, even if Request queue is not empty) and then consumed from the latter. This is necessary to avoid the same URL being processed more than once (from the list first and then possibly from the queue). In practical terms, such a combination can be useful when there are numerous initial URLs, but more URLs would be added dynamically by the crawler."}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"In Crawlee, there is not much need to combine the request queue together with the request list (although it's technically possible)."}),(0,n.jsxs)(t.p,{children:["Previously there was no way to add the initial requests to the queue in batches (to add an array of requests), i.e. we could have only added the requests one by one to the queue with the help of ",(0,n.jsx)(u.Z,{to:"core/class/RequestQueue#addRequest",children:(0,n.jsx)(t.code,{children:"addRequest()"})})," function."]}),(0,n.jsxs)(t.p,{children:["However, now we could use the ",(0,n.jsx)(u.Z,{to:"core/class/RequestQueue#addRequests",children:(0,n.jsx)(t.code,{children:"addRequests()"})})," function, which adds requests in batches. Thus, instead of combining the request queue and the request list, we can use only the request queue for such use-cases now. See the examples below."]})]}),"\n",(0,n.jsxs)(o.Z,{groupId:"queue_list",children:[(0,n.jsx)(i.Z,{value:"add_requests",label:"Request Queue",default:!0,children:(0,n.jsx)(l.default,{language:"js",children:"// This is the suggested way.\n// Note that we are not using the request list at all,\n// and not using the request queue explicitly here.\n\nimport { PuppeteerCrawler } from 'crawlee';\n\n// Prepare the sources array with URLs to visit (it can contain millions of URLs)\nconst sources = [\n    { url: 'http://www.example.com/page-1' },\n    { url: 'http://www.example.com/page-2' },\n    { url: 'http://www.example.com/page-3' },\n    // ...\n];\n\n// The crawler will automatically process requests from the queue.\n// It's used the same way for Cheerio/Playwright crawlers\nconst crawler = new PuppeteerCrawler({\n    async requestHandler({ crawler, enqueueLinks }) {\n        // Add new request to the queue\n        await crawler.addRequests(['http://www.example.com/new-page']);\n\n        // Add links found on page to the queue\n        await enqueueLinks();\n\n        // The requests above would be added to the queue\n        // and would be processed after the initial requests are processed.\n    },\n});\n\n// Add the initial sources array to the request queue\n// and run the crawler\nawait crawler.run(sources);\n"})}),(0,n.jsx)(i.Z,{value:"queue_list",label:"Request Queue + Request List",children:(0,n.jsx)(l.default,{language:"js",children:"// This is technically correct, but\n// we need to explicitly open/use both the request queue and the request list.\n// We suggest using the request queue and batch add the requests instead.\n\nimport { RequestList, RequestQueue, PuppeteerCrawler } from 'crawlee';\n\n// Prepare the sources array with URLs to visit (it can contain millions of URLs)\nconst sources = [\n    { url: 'http://www.example.com/page-1' },\n    { url: 'http://www.example.com/page-2' },\n    { url: 'http://www.example.com/page-3' },\n    // ...\n];\n\n// Open the request list with the initial sources array\nconst requestList = await RequestList.open('my-list', sources);\n\n// Open the default request queue. It's not necessary to add any requests to the queue\nconst requestQueue = await RequestQueue.open();\n\n// The crawler will automatically process requests from the list and the queue.\n// It's used the same way for Cheerio/Playwright crawlers\nconst crawler = new PuppeteerCrawler({\n    requestList,\n    requestQueue,\n    // Each request from the request list is enqueued to the request queue one by one.\n    // At this point request with the same URL would exist in the list and the queue\n    async requestHandler({ crawler, enqueueLinks }) {\n        // Add new request to the queue\n        await crawler.addRequests(['http://www.example.com/new-page']);\n\n        // Add links found on page to the queue\n        await enqueueLinks();\n\n        // The requests above would be added to the queue (but not to the list)\n        // and would be processed after the request list is empty.\n        // No more requests could be added to the list here\n    },\n});\n\n// Run the crawler\nawait crawler.run();\n"})})]}),"\n",(0,n.jsx)(t.h2,{id:"cleaning-up-the-storages",children:"Cleaning up the storages"}),"\n",(0,n.jsxs)(t.p,{children:["Default storages are purged before the crawler starts if not specified otherwise. This happens as early as when we try to open some storage (e.g. via ",(0,n.jsx)(t.code,{children:"RequestQueue.open()"}),") or when we try to work with a default storage via one of the helper methods (e.g. ",(0,n.jsx)(t.code,{children:"crawler.addRequests()"})," that under the hood calls ",(0,n.jsx)(t.code,{children:"RequestQueue.open()"}),"). If we don't work with storages explicitly in our code, the purging will eventually happen when the ",(0,n.jsx)(t.code,{children:"run"})," method of our crawler is executed. In case we need to purge the storages sooner, we can use the ",(0,n.jsx)(u.Z,{to:"core/function/purgeDefaultStorages",children:(0,n.jsx)(t.code,{children:"purgeDefaultStorages()"})})," helper explicitly:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"import { purgeDefaultStorages } from 'crawlee';\n\nawait purgeDefaultStorages();\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Calling this function will clean up the default request storage directory (and also the request list stored in default key-value store). This is a shortcut for running (optional) ",(0,n.jsx)(t.code,{children:"purge"})," method on the ",(0,n.jsx)(u.Z,{to:"core/interface/StorageClient",children:(0,n.jsx)(t.code,{children:"StorageClient"})})," interface, in other words it will call the ",(0,n.jsx)(t.code,{children:"purge"})," method of the underlying storage implementation we are currently using. You can make sure the storage is purged only once for a given execution context if you set ",(0,n.jsx)(t.code,{children:"onlyPurgeOnce"})," to ",(0,n.jsx)(t.code,{children:"true"})," in the ",(0,n.jsx)(t.code,{children:"options"})," object."]})]})}function m(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(w,{...e})}):w(e)}},97645:function(e,t,r){r.d(t,{Z:()=>a});var s=r("85893");r("67294");var n=r("67026");function a(e){let{children:t,hidden:r,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.Z)("tabItem_Ymn6",a),hidden:r,children:t})}},58168:function(e,t,r){r.d(t,{Z:()=>g});var s=r("85893"),n=r("67294"),a=r("67026"),u=r("34718"),o=r("16550"),i=r("8714"),l=r("89207"),c=r("69413"),d=r("54510");function h(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||n.isValidElement(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:t,tabValues:r}=e;return r.some(e=>e.value===t)}var w=r("6735");function m(e){let{className:t,block:r,selectedValue:n,selectValue:o,tabValues:i}=e,l=[],{blockElementScrollPositionUntilNextRender:c}=(0,u.o5)(),d=e=>{let t=e.currentTarget,r=i[l.indexOf(t)].value;r!==n&&(c(t),o(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{let r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1]}}t?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},t),children:i.map(e=>{let{value:t,label:r,attributes:u}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>{l.push(e)},onKeyDown:h,onClick:d,...u,className:(0,a.Z)("tabs__item","tabItem_LNqP",u?.className,{"tabs__item--active":n===t}),children:r??t},t)})})}function q(e){let{lazy:t,children:r,selectedValue:u}=e,o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){let e=o.find(e=>e.props.value===u);return e?(0,n.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:o.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==u}))})}function f(e){let t=function(e){let{defaultValue:t,queryString:r=!1,groupId:s}=e,a=function(e){let{values:t,children:r}=e;return(0,n.useMemo)(()=>{let e=t??h(r).map(e=>{let{props:{value:t,label:r,attributes:s,default:n}}=e;return{value:t,label:r,attributes:s,default:n}});return!function(e){let t=(0,c.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}(e),[u,w]=(0,n.useState)(()=>(function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let s=r.find(e=>e.default)??r[0];if(!s)throw Error("Unexpected error: 0 tabValues");return s.value})({defaultValue:t,tabValues:a})),[m,q]=function(e){let{queryString:t=!1,groupId:r}=e,s=(0,o.k6)(),a=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(a),(0,n.useCallback)(e=>{if(!a)return;let t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})},[a,s])]}({queryString:r,groupId:s}),[f,g]=function(e){let{groupId:t}=e,r=t?`docusaurus.tab.${t}`:null,[s,a]=(0,d.Nk)(r);return[s,(0,n.useCallback)(e=>{r&&a.set(e)},[r,a])]}({groupId:s}),x=(()=>{let e=m??f;return p({value:e,tabValues:a})?e:null})();return(0,i.Z)(()=>{x&&w(x)},[x]),{selectedValue:u,selectValue:(0,n.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error(`Can't select invalid tab value=${e}`);w(e),q(e),g(e)},[q,g,a]),tabValues:a}}(e);return(0,s.jsxs)("div",{className:(0,a.Z)("tabs-container","tabList__CuJ"),children:[(0,s.jsx)(m,{...t,...e}),(0,s.jsx)(q,{...t,...e})]})}function g(e){let t=(0,w.Z)();return(0,s.jsx)(f,{...e,children:h(e.children)},String(t))}},47927:function(e,t,r){r.d(t,{Z:function(){return c}});var s=r(85893);r(67294);var n=r(53367),a=r(89873),u=r(87262);let[o,i]=r(99074).version.split("."),l=[o,i].join("."),c=e=>{let{to:t,children:r}=e,o=(0,a.E)(),{siteConfig:i}=(0,u.default)();return i.presets[0][1].docs.disableVersioning||o.version===l?(0,s.jsx)(n.default,{to:`/api/${t}`,children:r}):(0,s.jsx)(n.default,{to:`/api/${"current"===o.version?"next":o.version}/${t}`,children:r})}},50065:function(e,t,r){r.d(t,{Z:function(){return o},a:function(){return u}});var s=r(67294);let n={},a=s.createContext(n);function u(e){let t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:u(e.components),s.createElement(a.Provider,{value:t},e.children)}},99074:function(e){e.exports=JSON.parse('{"name":"crawlee","version":"3.13.0","description":"The scalable web crawling and scraping library for JavaScript/Node.js. Enables development of data extraction and web automation jobs (not only) with headless Chrome and Puppeteer.","engines":{"node":">=16.0.0"},"bin":"./src/cli.ts","main":"./dist/index.js","module":"./dist/index.mjs","types":"./dist/index.d.ts","exports":{".":{"import":"./dist/index.mjs","require":"./dist/index.js","types":"./dist/index.d.ts"},"./package.json":"./package.json"},"keywords":["apify","headless","chrome","puppeteer","crawler","scraper"],"author":{"name":"Apify","email":"support@apify.com","url":"https://apify.com"},"contributors":["Jan Curn <jan@apify.com>","Marek Trunkat <marek@apify.com>","Ondra Urban <ondra@apify.com>"],"license":"Apache-2.0","repository":{"type":"git","url":"git+https://github.com/apify/crawlee"},"bugs":{"url":"https://github.com/apify/crawlee/issues"},"homepage":"https://crawlee.dev","scripts":{"build":"yarn clean && yarn compile && yarn copy","clean":"rimraf ./dist","compile":"tsc -p tsconfig.build.json && gen-esm-wrapper ./dist/index.js ./dist/index.mjs","copy":"tsx ../../scripts/copy.ts"},"publishConfig":{"access":"public"},"dependencies":{"@crawlee/basic":"3.13.0","@crawlee/browser":"3.13.0","@crawlee/browser-pool":"3.13.0","@crawlee/cheerio":"3.13.0","@crawlee/cli":"3.13.0","@crawlee/core":"3.13.0","@crawlee/http":"3.13.0","@crawlee/jsdom":"3.13.0","@crawlee/linkedom":"3.13.0","@crawlee/playwright":"3.13.0","@crawlee/puppeteer":"3.13.0","@crawlee/utils":"3.13.0","import-local":"^3.1.0","tslib":"^2.4.0"},"peerDependencies":{"playwright":"*","puppeteer":"*"},"peerDependenciesMeta":{"playwright":{"optional":true},"puppeteer":{"optional":true}}}')}}]);