"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["92864"],{86384:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return a},metadata:function(){return n},toc:function(){return h}});var n=r(97131),s=r(85893),i=r(50065);let a={slug:"graphql-persisted-query",title:"Reverse engineering GraphQL persistedQuery extension",description:"Learn how to do reverse engineering on persistedQuery extension by GraphQL and reveal the query hash needed for scraping.",image:"./img/graphql.webp",authors:["SauravJ","MatejV"]},o=void 0,u={image:r(37743).Z,authorsImageUrls:[void 0,void 0]},h=[];function p(e){let t={a:"a",code:"code",img:"img",p:"p",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"GraphQL is a query language for getting deeply nested structured data from a website's backend, similar to MongoDB queries."}),"\n",(0,s.jsxs)(t.p,{children:["The request is usually a POST to some general ",(0,s.jsx)(t.code,{children:"/graphql"})," endpoint with a body like this:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"GraphQL Query",src:r(67737).Z+"",width:"853",height:"275"})}),"\n",(0,s.jsx)(t.p,{children:"When scraping data from websites using GraphQL, it\u2019s common to inspect the network requests in developer tools to find the exact queries being used. However, on some websites, you might notice that the GraphQL query itself isn\u2019t visible in the request. Instead, you only see a cryptic hash value. This can be confusing and makes it harder to understand how data is being requested from the server."}),"\n",(0,s.jsxs)(t.p,{children:["This is because some websites use a feature called ",(0,s.jsx)(t.a,{href:"https://www.apollographql.com/docs/apollo-server/performance/apq/",children:'"persisted queries.'})," It's a performance optimization that reduces the amount of data sent with each request by replacing the full query text with a precomputed hash. While this improves website speed and efficiency, it introduces challenges for scraping because the query text isn\u2019t readily available."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Persisted Query Reverse Engineering",src:r(3807).Z+"",width:"1152",height:"649"})})]})}function c(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},37743:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/graphql-a3962ed441b2a078e43c8158ad64336a.webp"},3807:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/graphql-persisted-query-6e36e61d76503e617fe4e7651bdf53a3.webp"},67737:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/graphql-a3962ed441b2a078e43c8158ad64336a.webp"},50065:function(e,t,r){r.d(t,{Z:function(){return o},a:function(){return a}});var n=r(67294);let s={},i=n.createContext(s);function a(e){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:t},e.children)}},97131:function(e){e.exports=JSON.parse('{"permalink":"/blog/graphql-persisted-query","source":"@site/blog/2024/11-15-graphql-persisted-query/index.md","title":"Reverse engineering GraphQL persistedQuery extension","description":"Learn how to do reverse engineering on persistedQuery extension by GraphQL and reveal the query hash needed for scraping.","date":"2024-11-15T00:00:00.000Z","tags":[],"readingTime":4.67,"hasTruncateMarker":true,"authors":[{"name":"Saurav Jain","title":"Developer Community Manager","url":"https://github.com/souravjain540","socials":{"x":"https://x.com/sauain","github":"https://github.com/souravjain540"},"imageURL":"https://avatars.githubusercontent.com/u/53312820?v=4","key":"SauravJ","page":null},{"name":"Mat\u011Bj Volf","title":"Web Automation Engineer","url":"https://github.com/mvolfik","socials":{"github":"https://github.com/mvolfik"},"imageURL":"https://avatars.githubusercontent.com/u/31281386?v=4","key":"MatejV","page":null}],"frontMatter":{"slug":"graphql-persisted-query","title":"Reverse engineering GraphQL persistedQuery extension","description":"Learn how to do reverse engineering on persistedQuery extension by GraphQL and reveal the query hash needed for scraping.","image":"./img/graphql.webp","authors":["SauravJ","MatejV"]},"unlisted":false,"prevItem":{"title":"How to scrape Google search results with Python","permalink":"/blog/scrape-google-search"},"nextItem":{"title":"12 tips on how to think like a web scraping expert","permalink":"/blog/web-scraping-tips"}}')}}]);