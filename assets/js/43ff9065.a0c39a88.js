"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3866"],{63903:function(e,n,t){t.r(n),t.d(n,{default:()=>m,frontMatter:()=>d,metadata:()=>o,assets:()=>p,toc:()=>h,contentTitle:()=>c});var o=JSON.parse('{"id":"examples/file-download-stream","title":"Download a file with Node.js streams","description":"For larger files, it is more efficient to use Node.js streams to download and transfer the files. This example demonstrates how to download files using streams.","source":"@site/versioned_docs/version-3.11/examples/file_download_stream.mdx","sourceDirName":"examples","slug":"/examples/file-download-stream","permalink":"/docs/3.11/examples/file-download-stream","draft":false,"unlisted":false,"editUrl":"https://github.com/apify/crawlee/edit/master/website/versioned_docs/version-3.11/examples/file_download_stream.mdx","tags":[],"version":"3.11","lastUpdatedBy":"Jind\u0159ich B\xe4r","lastUpdatedAt":1720711256000,"frontMatter":{"id":"file-download-stream","title":"Download a file with Node.js streams"},"sidebar":"docs","previous":{"title":"Download a file","permalink":"/docs/3.11/examples/file-download"},"next":{"title":"Fill and Submit a Form using Puppeteers","permalink":"/docs/3.11/examples/forms"}}'),r=t("85893"),a=t("50065"),s=t("60643"),l=t("47927");let i={code:"import { pipeline, Transform } from 'stream';\n\nimport { FileDownload, type Log } from 'crawlee';\n\n// A sample Transform stream logging the download progress.\nfunction createProgressTracker({ url, log, totalBytes }: { url: URL; log: Log; totalBytes: number }) {\n    let downloadedBytes = 0;\n\n    return new Transform({\n        transform(chunk, _, callback) {\n            if (downloadedBytes % 1e6 > (downloadedBytes + chunk.length) % 1e6) {\n                log.info(\n                    `Downloaded ${downloadedBytes / 1e6} MB (${Math.floor((downloadedBytes / totalBytes) * 100)}%) for ${url}.`,\n                );\n            }\n            downloadedBytes += chunk.length;\n\n            this.push(chunk);\n            callback();\n        },\n    });\n}\n\n// Create a FileDownload - a custom crawler instance that will download files from URLs.\nconst crawler = new FileDownload({\n    async streamHandler({ stream, request, log, getKeyValueStore }) {\n        const url = new URL(request.url);\n\n        log.info(`Downloading ${url} to ${url.pathname.replace(/\\//g, '_')}...`);\n\n        await new Promise<void>((resolve, reject) => {\n            // With the 'response' event, we have received the headers of the response.\n            stream.on('response', async (response) => {\n                const kvs = await getKeyValueStore();\n                await kvs.setValue(\n                    url.pathname.replace(/\\//g, '_'),\n                    pipeline(\n                        stream,\n                        createProgressTracker({ url, log, totalBytes: Number(response.headers['content-length']) }),\n                        (error) => {\n                            if (error) reject(error);\n                        },\n                    ),\n                    { contentType: response.headers['content-type'] },\n                );\n\n                log.info(`Downloaded ${url} to ${url.pathname.replace(/\\//g, '_')}.`);\n\n                resolve();\n            });\n        });\n    },\n});\n\n// The initial list of URLs to crawl. Here we use just a few hard-coded URLs.\nawait crawler.addRequests([\n    'https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4',\n    'https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_640x360.m4v',\n]);\n\n// Run the downloader and wait for it to finish.\nawait crawler.run();\n",hash:"invalid-token"},d={id:"file-download-stream",title:"Download a file with Node.js streams"},c=void 0,p={},h=[];function u(e){let n={code:"code",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"For larger files, it is more efficient to use Node.js streams to download and transfer the files. This example demonstrates how to download files using streams."}),"\n",(0,r.jsxs)(n.p,{children:["The script uses the ",(0,r.jsx)(l.Z,{to:"http-crawler/class/FileDownload",children:(0,r.jsx)(n.code,{children:"FileDownload"})})," crawler class to download files with streams, log the progress, and store the data in the key-value store.\nIn local configuration, the data will be stored as files in ",(0,r.jsx)(n.code,{children:"./storage/key_value_stores/default"}),"."]}),"\n",(0,r.jsx)(s.Z,{className:"language-js",type:"cheerio",children:i})]})}function m(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},47927:function(e,n,t){t.d(n,{Z:function(){return c}});var o=t(85893);t(67294);var r=t(53367),a=t(89873),s=t(87262);let[l,i]=t(99074).version.split("."),d=[l,i].join("."),c=e=>{let{to:n,children:t}=e,l=(0,a.E)(),{siteConfig:i}=(0,s.default)();return i.presets[0][1].docs.disableVersioning||l.version===d?(0,o.jsx)(r.default,{to:`/api/${n}`,children:t}):(0,o.jsx)(r.default,{to:`/api/${"current"===l.version?"next":l.version}/${n}`,children:t})}},60643:function(e,n,t){t.d(n,{Z:()=>d});var o=t("85893");t("67294");var r=t("67026"),a=t("96199"),s=t("53367");let l={button:"button_YBBj",container:"container_TGAW"},i={playwright:"6i5QsHBMtm3hKph70",puppeteer:"7tWSD8hrYzuc9Lte7",cheerio:"kk67IcZkKSSBTslXI"},d=e=>{let{children:n,actor:t,hash:d,type:c,...p}=e;if(d=d??n.hash,!n.code)throw Error(`RunnableCodeBlock requires "code" and "hash" props
Make sure you are importing the code block contents with the roa-loader.`);if(!d)return(0,o.jsx)(a.default,{...p,children:n.code});let h=`https://console.apify.com/actors/${t??i[c??"playwright"]}?runConfig=${d}&asrc=run_on_apify`;return(0,o.jsxs)("div",{className:(0,r.Z)(l.container,"runnable-code-block"),children:[(0,o.jsxs)(s.default,{href:h,className:l.button,rel:"follow",children:["Run on",(0,o.jsxs)("svg",{width:"91",height:"25",viewBox:"0 0 91 25",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:"apify-logo-light alignMiddle_src-theme-Footer-index-module",children:[(0,o.jsx)("path",{d:"M3.135 2.85A3.409 3.409 0 0 0 .227 6.699l2.016 14.398 8.483-19.304-7.59 1.059Z",fill:"#97D700"}),(0,o.jsx)("path",{d:"M23.604 14.847 22.811 3.78a3.414 3.414 0 0 0-3.64-3.154c-.077 0-.153.014-.228.025l-3.274.452 7.192 16.124c.54-.67.805-1.52.743-2.379Z",fill:"#71C5E8"}),(0,o.jsx)("path",{d:"M5.336 24.595c.58.066 1.169-.02 1.706-.248l12.35-5.211L13.514 5.97 5.336 24.595Z",fill:"#FF9013"}),(0,o.jsx)("path",{d:"M33.83 5.304h3.903l5.448 14.623h-3.494l-1.022-2.994h-5.877l-1.025 2.994h-3.384L33.83 5.304Zm-.177 9.032h4.14l-2-5.994h-.086l-2.054 5.994ZM58.842 5.304h3.302v14.623h-3.302V5.304ZM64.634 5.304h10.71v2.7h-7.4v4.101h5.962v2.632h-5.963v5.186h-3.309V5.303ZM82.116 14.38l-5.498-9.076h3.748l3.428 6.016h.085l3.599-6.016H91l-5.56 9.054v5.569h-3.324v-5.548ZM51.75 5.304h-7.292v14.623h3.3v-4.634h3.993a4.995 4.995 0 1 0 0-9.99Zm-.364 7.417h-3.628V7.875h3.627a2.423 2.423 0 0 1 0 4.846Z",className:"apify-logo",fill:"#000"})]})]}),(0,o.jsx)(a.default,{...p,className:(0,r.Z)(l.codeBlock,"code-block",null!=p.title?"has-title":"no-title"),children:n.code})]})}},50065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return s}});var o=t(67294);let r={},a=o.createContext(r);function s(e){let n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},99074:function(e){e.exports=JSON.parse('{"name":"crawlee","version":"3.13.0","description":"The scalable web crawling and scraping library for JavaScript/Node.js. Enables development of data extraction and web automation jobs (not only) with headless Chrome and Puppeteer.","engines":{"node":">=16.0.0"},"bin":"./src/cli.ts","main":"./dist/index.js","module":"./dist/index.mjs","types":"./dist/index.d.ts","exports":{".":{"import":"./dist/index.mjs","require":"./dist/index.js","types":"./dist/index.d.ts"},"./package.json":"./package.json"},"keywords":["apify","headless","chrome","puppeteer","crawler","scraper"],"author":{"name":"Apify","email":"support@apify.com","url":"https://apify.com"},"contributors":["Jan Curn <jan@apify.com>","Marek Trunkat <marek@apify.com>","Ondra Urban <ondra@apify.com>"],"license":"Apache-2.0","repository":{"type":"git","url":"git+https://github.com/apify/crawlee"},"bugs":{"url":"https://github.com/apify/crawlee/issues"},"homepage":"https://crawlee.dev","scripts":{"build":"yarn clean && yarn compile && yarn copy","clean":"rimraf ./dist","compile":"tsc -p tsconfig.build.json && gen-esm-wrapper ./dist/index.js ./dist/index.mjs","copy":"tsx ../../scripts/copy.ts"},"publishConfig":{"access":"public"},"dependencies":{"@crawlee/basic":"3.13.0","@crawlee/browser":"3.13.0","@crawlee/browser-pool":"3.13.0","@crawlee/cheerio":"3.13.0","@crawlee/cli":"3.13.0","@crawlee/core":"3.13.0","@crawlee/http":"3.13.0","@crawlee/jsdom":"3.13.0","@crawlee/linkedom":"3.13.0","@crawlee/playwright":"3.13.0","@crawlee/puppeteer":"3.13.0","@crawlee/utils":"3.13.0","import-local":"^3.1.0","tslib":"^2.4.0"},"peerDependencies":{"playwright":"*","puppeteer":"*"},"peerDependenciesMeta":{"playwright":{"optional":true},"puppeteer":{"optional":true}}}')}}]);