"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["28553"],{39714:function(e,t,n){n.r(t),n.d(t,{default:()=>h,frontMatter:()=>l,metadata:()=>r,assets:()=>d,toc:()=>u,contentTitle:()=>c});var r=JSON.parse('{"id":"examples/jsdom-crawler","title":"JSDOM crawler","description":"This example demonstrates how to use JSDOMCrawler to interact with a website using jsdom DOM implementation.","source":"@site/versioned_docs/version-3.4/examples/jsdom_crawler.mdx","sourceDirName":"examples","slug":"/examples/jsdom-crawler","permalink":"/docs/3.4/examples/jsdom-crawler","draft":false,"unlisted":false,"editUrl":"https://github.com/apify/crawlee/edit/master/website/versioned_docs/version-3.4/examples/jsdom_crawler.mdx","tags":[],"version":"3.4","lastUpdatedBy":"Jind\u0159ich B\xe4r","lastUpdatedAt":1686744725000,"frontMatter":{"id":"jsdom-crawler","title":"JSDOM crawler"},"sidebar":"docs","previous":{"title":"HTTP crawler","permalink":"/docs/3.4/examples/http-crawler"},"next":{"title":"Dataset Map and Reduce methods","permalink":"/docs/3.4/examples/map-and-reduce"}}'),a=n("85893"),s=n("50065"),o=n("96199"),i=n("47927");let l={id:"jsdom-crawler",title:"JSDOM crawler"},c=void 0,d={},u=[];function p(e){let t={a:"a",code:"code",p:"p",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This example demonstrates how to use ",(0,a.jsx)(i.Z,{to:"jsdom-crawler/class/JSDOMCrawler",children:(0,a.jsx)(t.code,{children:"JSDOMCrawler"})})," to interact with a website using ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/jsdom",target:"_blank",rel:"noopener",children:"jsdom"})," DOM implementation.\nHere the script will open a calculator app from the ",(0,a.jsx)(t.a,{href:"https://reactjs.org/community/examples.html",target:"_blank",rel:"noopener",children:"React examples"}),", click ",(0,a.jsx)(t.code,{children:"1"})," ",(0,a.jsx)(t.code,{children:"+"})," ",(0,a.jsx)(t.code,{children:"1"})," ",(0,a.jsx)(t.code,{children:"="})," and extract the result."]}),"\n",(0,a.jsx)(o.default,{className:"language-ts",children:"import { JSDOMCrawler, log } from 'crawlee';\n\n// Create an instance of the JSDOMCrawler class - crawler that automatically \n// loads the URLs and parses their HTML using the jsdom library.\nconst crawler = new JSDOMCrawler({\n    // Setting the `runScripts` option to `true` allows the crawler to execute client-side \n    // JavaScript code on the page. This is required for some websites (such as the React application in this example), but may pose a security risk.\n    runScripts: true,\n    // This function will be called for each crawled URL.\n    // Here we extract the window object from the options and use it to extract data from the page.\n    requestHandler: async ({ window }) => {\n        const { document } = window;\n        // The `document` object is analogous to the `window.document` object you know from your favourite web browsers.\n        // Thanks to this, you can use the regular browser-side APIs here.\n        document.querySelectorAll('button')[12].click(); // 1\n        document.querySelectorAll('button')[15].click(); // +\n        document.querySelectorAll('button')[12].click(); // 1\n        document.querySelectorAll('button')[18].click(); // =\n\n        const result = document.querySelectorAll('.component-display')[0].childNodes[0] as Element;\n        // The result is passed to the console. Unlike with Playwright or Puppeteer crawlers, \n        // this console call goes to the Node.js console, not the browser console. All the code here runs right in Node.js!\n        log.info(result.innerHTML); // 2\n    },\n});\n\n// Run the crawler and wait for it to finish.\nawait crawler.run([\n    'https://ahfarmer.github.io/calculator/',\n]);\n\nlog.debug('Crawler finished.');"}),"\n",(0,a.jsxs)(t.p,{children:["In the following example, we use ",(0,a.jsx)(i.Z,{to:"jsdom-crawler/class/JSDOMCrawler",children:(0,a.jsx)(t.code,{children:"JSDOMCrawler"})})," to crawl a list of URLs from an external file, load each URL using a plain HTTP request, parse the HTML using the ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/jsdom",target:"_blank",rel:"noopener",children:"jsdom"})," DOM implementation and extract some data from it: the page title and all ",(0,a.jsx)(t.code,{children:"h1"})," tags."]}),"\n",(0,a.jsx)(o.default,{className:"language-ts",children:"import { Dataset, JSDOMCrawler, log, LogLevel } from 'crawlee';\n\n// Crawlers come with various utilities, e.g. for logging.\n// Here we use debug level of logging to improve the debugging experience.\n// This functionality is optional!\nlog.setLevel(LogLevel.DEBUG);\n\n// Create an instance of the JSDOMCrawler class - a crawler\n// that automatically loads the URLs and parses their HTML using the jsdom library.\nconst crawler = new JSDOMCrawler({\n    // The crawler downloads and processes the web pages in parallel, with a concurrency\n    // automatically managed based on the available system memory and CPU (see AutoscaledPool class).\n    // Here we define some hard limits for the concurrency.\n    minConcurrency: 10,\n    maxConcurrency: 50,\n\n    // On error, retry each page at most once.\n    maxRequestRetries: 1,\n\n    // Increase the timeout for processing of each page.\n    requestHandlerTimeoutSecs: 30,\n\n    // Limit to 10 requests per one crawl\n    maxRequestsPerCrawl: 10,\n\n    // This function will be called for each URL to crawl.\n    // It accepts a single parameter, which is an object with options as:\n    // https://crawlee.dev/api/jsdom-crawler/interface/JSDOMCrawlerOptions#requestHandler\n    // We use for demonstration only 2 of them:\n    // - request: an instance of the Request class with information such as the URL that is being crawled and HTTP method\n    // - window: the JSDOM window object\n    async requestHandler({ request, window }) {\n        log.debug(`Processing ${request.url}...`);\n\n        // Extract data from the page\n        const title = window.document.title;\n        const h1texts: { text: string }[] = [];\n        window.document.querySelectorAll('h1').forEach((element) => {\n            h1texts.push({\n                text: element.textContent!,\n            });\n        });\n\n        // Store the results to the dataset. In local configuration,\n        // the data will be stored as JSON files in ./storage/datasets/default\n        await Dataset.pushData({\n            url: request.url,\n            title,\n            h1texts,\n        });\n    },\n\n    // This function is called if the page processing failed more than maxRequestRetries + 1 times.\n    failedRequestHandler({ request }) {\n        log.debug(`Request ${request.url} failed twice.`);\n    },\n});\n\n// Run the crawler and wait for it to finish.\nawait crawler.run([\n    'https://crawlee.dev',\n]);\n\nlog.debug('Crawler finished.');\n"})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},47927:function(e,t,n){n.d(t,{Z:function(){return d}});var r=n(85893);n(67294);var a=n(53367),s=n(89873),o=n(87262);let[i,l]=n(99074).version.split("."),c=[i,l].join("."),d=e=>{let{to:t,children:n}=e,i=(0,s.E)(),{siteConfig:l}=(0,o.default)();return l.presets[0][1].docs.disableVersioning||i.version===c?(0,r.jsx)(a.default,{to:`/api/${t}`,children:n}):(0,r.jsx)(a.default,{to:`/api/${"current"===i.version?"next":i.version}/${t}`,children:n})}},50065:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return o}});var r=n(67294);let a={},s=r.createContext(a);function o(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},99074:function(e){e.exports=JSON.parse('{"name":"crawlee","version":"3.13.0","description":"The scalable web crawling and scraping library for JavaScript/Node.js. Enables development of data extraction and web automation jobs (not only) with headless Chrome and Puppeteer.","engines":{"node":">=16.0.0"},"bin":"./src/cli.ts","main":"./dist/index.js","module":"./dist/index.mjs","types":"./dist/index.d.ts","exports":{".":{"import":"./dist/index.mjs","require":"./dist/index.js","types":"./dist/index.d.ts"},"./package.json":"./package.json"},"keywords":["apify","headless","chrome","puppeteer","crawler","scraper"],"author":{"name":"Apify","email":"support@apify.com","url":"https://apify.com"},"contributors":["Jan Curn <jan@apify.com>","Marek Trunkat <marek@apify.com>","Ondra Urban <ondra@apify.com>"],"license":"Apache-2.0","repository":{"type":"git","url":"git+https://github.com/apify/crawlee"},"bugs":{"url":"https://github.com/apify/crawlee/issues"},"homepage":"https://crawlee.dev","scripts":{"build":"yarn clean && yarn compile && yarn copy","clean":"rimraf ./dist","compile":"tsc -p tsconfig.build.json && gen-esm-wrapper ./dist/index.js ./dist/index.mjs","copy":"tsx ../../scripts/copy.ts"},"publishConfig":{"access":"public"},"dependencies":{"@crawlee/basic":"3.13.0","@crawlee/browser":"3.13.0","@crawlee/browser-pool":"3.13.0","@crawlee/cheerio":"3.13.0","@crawlee/cli":"3.13.0","@crawlee/core":"3.13.0","@crawlee/http":"3.13.0","@crawlee/jsdom":"3.13.0","@crawlee/linkedom":"3.13.0","@crawlee/playwright":"3.13.0","@crawlee/puppeteer":"3.13.0","@crawlee/utils":"3.13.0","import-local":"^3.1.0","tslib":"^2.4.0"},"peerDependencies":{"playwright":"*","puppeteer":"*"},"peerDependenciesMeta":{"playwright":{"optional":true},"puppeteer":{"optional":true}}}')}}]);